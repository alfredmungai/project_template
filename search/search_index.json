{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Project Template My template for data science projects Project Organization project_template/ <- Project name. \u2502 \u251c\u2500\u2500\u2500data/ <- Keep all versions of data for this project. \u2502 \u251c\u2500\u2500 external/ <- Data from third party sources. \u2502 \u251c\u2500\u2500 interim/ <- Intermediate data that has been transformed. \u2502 \u251c\u2500\u2500 processed/ <- The final, canonical data sets for modeling. \u2502 \u2514\u2500\u2500 raw/ <- The original, immutable data dump. \u2502 \u251c\u2500\u2500\u2500docker/ <- Dockerfiles used to run project in container. If project only had one Dockerfile it can \u2502 moved inside the project without a `docker/` folder. \u2502 \u251c\u2500\u2500\u2500docs/ <- A default Sphinx project; see sphinx-doc.org for details \u251c\u2500\u2500\u2500models/ <- Trained and serialized models, model predictions, or model summaries \u251c\u2500\u2500\u2500notebooks/ <- Jupyter notebooks. Naming convention is a number (for ordering), \u2502 the creator's initials, and a short `-` delimited description, e.g. \u2502 `1.0-jqp-initial-data-exploration`. \u2502 \u251c\u2500\u2500\u2500project_template/ <- Source code for use in this project. You can put it in `src` if you preffer. \u2502 \u2502 Has similar name to project name. \u2502 \u2502 \u2502 \u251c\u2500\u2500\u2500data/ <- Scripts to deal with data. \u2502 \u2502 \u2502 __init__.py <- Makes data code a Python module. \u2502 \u2502 \u2514 make_dataset.py <- Process data \u2502 \u2502 \u2502 \u251c\u2500\u2500\u2500features/ <- Process raw data into features for modeling. \u2502 \u2502 \u2502 __init__.py <- Makes raw data into features code a Python module. \u2502 \u2502 \u2514 build_features.py <- Script to process data to features. \u2502 \u2502 \u2502 \u251c\u2500\u2500\u2500models/ <- Scripts for modeling: training and inference \u2502 \u2502 \u2502 __init__.py <- Makes modeling code a Python module. \u2502 \u2502 \u2502 predict_model.py <- Script for making model predicitons. \u2502 \u2502 \u2514 train_model.py <- Script for training model. \u2502 \u2502 \u2502 \u251c\u2500\u2500\u2500visualization/ <- Create exploratory and results oriented visualizations \u2502 \u2502 \u2502 __init__.py <- Makes exploratory and results oriented visualizations code a Python module. \u2502 \u2502 \u2514 visualize.py <- Script to create exploratory and results oriented visualizations. \u2502 \u2502 \u2502 \u2502 __init__.py <- Makes source code a Python module. \u2502 \u2514 __main__.py <- Make the module execute some functionality when run as the entry point of the program. \u2502 Execute this script when running `python project_template`. \u2502 \u251c\u2500\u2500\u2500references <- Data dictionaries, manuals, and all other explanatory materials. \u251c\u2500\u2500\u2500reports <- Generated analysis as HTML, PDF, LaTeX, etc. \u2502 \u2514\u2500\u2500\u2500figures/ <- Generated graphics and figures to be used in reporting \u2502 \u251c\u2500\u2500\u2500tests <- Keep all testing code. \u2502 \u2514 __init__.py <- Make testing code a Python module. \u2502 \u2502 README.md <- The top-level README for developers using this project. \u2502 LICENSE <- Project license. \u2502 Makefile <- Makefile with commands like `make data` or `make train`. \u2502 setup.cfg <- Ini file that contains option defaults for setup.py commands. \u2502 setup.py <- Makes project pip installable (pip install -e .) so source code can be imported. \u2514 requierements.txt <- The requirements file for reproducing the analysis environment, e.g. generated with `pip freeze > requirements.txt`","title":"About"},{"location":"#project-template","text":"My template for data science projects","title":"Project Template"},{"location":"#project-organization","text":"project_template/ <- Project name. \u2502 \u251c\u2500\u2500\u2500data/ <- Keep all versions of data for this project. \u2502 \u251c\u2500\u2500 external/ <- Data from third party sources. \u2502 \u251c\u2500\u2500 interim/ <- Intermediate data that has been transformed. \u2502 \u251c\u2500\u2500 processed/ <- The final, canonical data sets for modeling. \u2502 \u2514\u2500\u2500 raw/ <- The original, immutable data dump. \u2502 \u251c\u2500\u2500\u2500docker/ <- Dockerfiles used to run project in container. If project only had one Dockerfile it can \u2502 moved inside the project without a `docker/` folder. \u2502 \u251c\u2500\u2500\u2500docs/ <- A default Sphinx project; see sphinx-doc.org for details \u251c\u2500\u2500\u2500models/ <- Trained and serialized models, model predictions, or model summaries \u251c\u2500\u2500\u2500notebooks/ <- Jupyter notebooks. Naming convention is a number (for ordering), \u2502 the creator's initials, and a short `-` delimited description, e.g. \u2502 `1.0-jqp-initial-data-exploration`. \u2502 \u251c\u2500\u2500\u2500project_template/ <- Source code for use in this project. You can put it in `src` if you preffer. \u2502 \u2502 Has similar name to project name. \u2502 \u2502 \u2502 \u251c\u2500\u2500\u2500data/ <- Scripts to deal with data. \u2502 \u2502 \u2502 __init__.py <- Makes data code a Python module. \u2502 \u2502 \u2514 make_dataset.py <- Process data \u2502 \u2502 \u2502 \u251c\u2500\u2500\u2500features/ <- Process raw data into features for modeling. \u2502 \u2502 \u2502 __init__.py <- Makes raw data into features code a Python module. \u2502 \u2502 \u2514 build_features.py <- Script to process data to features. \u2502 \u2502 \u2502 \u251c\u2500\u2500\u2500models/ <- Scripts for modeling: training and inference \u2502 \u2502 \u2502 __init__.py <- Makes modeling code a Python module. \u2502 \u2502 \u2502 predict_model.py <- Script for making model predicitons. \u2502 \u2502 \u2514 train_model.py <- Script for training model. \u2502 \u2502 \u2502 \u251c\u2500\u2500\u2500visualization/ <- Create exploratory and results oriented visualizations \u2502 \u2502 \u2502 __init__.py <- Makes exploratory and results oriented visualizations code a Python module. \u2502 \u2502 \u2514 visualize.py <- Script to create exploratory and results oriented visualizations. \u2502 \u2502 \u2502 \u2502 __init__.py <- Makes source code a Python module. \u2502 \u2514 __main__.py <- Make the module execute some functionality when run as the entry point of the program. \u2502 Execute this script when running `python project_template`. \u2502 \u251c\u2500\u2500\u2500references <- Data dictionaries, manuals, and all other explanatory materials. \u251c\u2500\u2500\u2500reports <- Generated analysis as HTML, PDF, LaTeX, etc. \u2502 \u2514\u2500\u2500\u2500figures/ <- Generated graphics and figures to be used in reporting \u2502 \u251c\u2500\u2500\u2500tests <- Keep all testing code. \u2502 \u2514 __init__.py <- Make testing code a Python module. \u2502 \u2502 README.md <- The top-level README for developers using this project. \u2502 LICENSE <- Project license. \u2502 Makefile <- Makefile with commands like `make data` or `make train`. \u2502 setup.cfg <- Ini file that contains option defaults for setup.py commands. \u2502 setup.py <- Makes project pip installable (pip install -e .) so source code can be imported. \u2514 requierements.txt <- The requirements file for reproducing the analysis environment, e.g. generated with `pip freeze > requirements.txt`","title":"Project Organization"}]}